generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Notification {
  id        String   @id @default(cuid())
  type      String
  message   String
  userId    String
  postId    String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id])
  post      Post?    @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("notification")
}

model User {
  id                    String                 @id
  name                  String
  email                 String                 @unique
  emailVerified         Boolean
  image                 String?
  createdAt             DateTime
  updatedAt             DateTime
  bio                   String?
  location              String?
  username              String?
  department            String?
  publications          String[]               @default([])
  researchFocus         String?
  skills                String[]               @default([])
  university            String?
  yearOfStudy           String?
  role                  Role                   @default(STUDENT)
  Event                 Event[]
  createdGroups         Group[]                @relation("UserCreatedGroups")
  groupMemberships      GroupMember[]          @relation("UserGroupMemberships")
  resources             Resource[]             @relation("UserResources")
  submittedResources    Resource[]             @relation("ResourceSubmittedBy")
  approvedResources     Resource[]             @relation("ResourceApprovedBy")
  resourceAudits        ResourceAudit[]        @relation("ResourceAuditActor")
  universityMemberships UniversityMembership[]
  Opportunity           Opportunity[]
  accounts              Account[]
  Comments              Comment[]
  Likes                 Like[]
  notifications         Notification[]
  Post                  Post[]
  sessions              Session[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Post {
  id            String         @id @default(cuid())
  title         String?
  content       String
  imageUrl      String?
  mediaType     String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  authorId      String
  tags          String[]
  attachments   Json?
  citation      String?
  department    String?
  doi           String?
  downloads     Int            @default(0)
  resourceType  String?
  role          String?
  summary       String?
  university    String?
  views         Int            @default(0)
  visibility    String?
  eventDetails  Json?
  comments      Comment[]
  likes         Like[]
  notifications Notification[]
  author        User           @relation(fields: [authorId], references: [id])

  @@map("post")
}

model Comment {
  id            String         @id @default(cuid())
  content       String
  createdAt     DateTime       @default(now())
  postId        String
  authorId      String
  author        User           @relation(fields: [authorId], references: [id])
  post          Post           @relation(fields: [postId], references: [id])
  notifications Notification[]

  @@map("comment")
}

model Like {
  id     String @id @default(cuid())
  postId String
  userId String
  post   Post   @relation(fields: [postId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@unique([postId, userId])
  @@map("like")
}

model Resource {
  id            String              @id @default(cuid())
  name          String
  slug          String
  nodeType      ResourceNodeType
  folderKind    ResourceFolderKind?
  mediaType     ResourceMediaType?
  parentId      String?
  parent        Resource?           @relation("ResourceHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children      Resource[]          @relation("ResourceHierarchy")
  depth         Int                 @default(0)
  sortOrder     Int                 @default(0)
  canonicalPath String
  description   String?
  tags          String[]            @default([])
  categories    String[]            @default([])
  fileName      String?
  fileSize      Int?
  mimeType      String?
  storageKey    String?
  downloadUrl   String?
  externalUrl   String?
  previewUrl    String?
  checksum      String?
  version       Int                 @default(1)
  downloads     Int                 @default(0)
  rating        Float               @default(0)
  status        ResourceStatus      @default(PENDING)
  reviewNote    String?
  submittedById String?
  approvedById  String?
  approvedAt    DateTime?
  uploadedById  String?
  universityId  String?
  archivedAt    DateTime?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  publishedAt   DateTime?
  isArchived    Boolean             @default(false)
  uploadedBy    User?               @relation("UserResources", fields: [uploadedById], references: [id])
  submittedBy   User?               @relation("ResourceSubmittedBy", fields: [submittedById], references: [id])
  approvedBy    User?               @relation("ResourceApprovedBy", fields: [approvedById], references: [id])
  university    University?         @relation(fields: [universityId], references: [id], onDelete: Cascade)
  audits        ResourceAudit[]

  @@unique([parentId, slug])
  @@unique([canonicalPath])
  @@index([nodeType])
  @@index([folderKind])
  @@index([mediaType])
  @@index([parentId])
  @@index([status])
  @@index([universityId])
  @@map("resource")
}

model University {
  id          String                 @id @default(cuid())
  name        String
  slug        String                 @unique
  logoUrl     String?
  metadata    Json?
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  memberships UniversityMembership[]
  resources   Resource[]

  @@map("university")
}

model UniversityMembership {
  id           String         @id @default(cuid())
  userId       String
  universityId String
  role         UniversityRole
  createdAt    DateTime       @default(now())
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  university   University     @relation(fields: [universityId], references: [id], onDelete: Cascade)

  @@unique([userId, universityId])
  @@index([universityId])
  @@index([role])
  @@map("university_membership")
}

model ResourceAudit {
  id         String              @id @default(cuid())
  resourceId String
  actorId    String
  action     ResourceAuditAction
  notes      String?
  createdAt  DateTime            @default(now())
  resource   Resource            @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  actor      User                @relation("ResourceAuditActor", fields: [actorId], references: [id], onDelete: Cascade)

  @@index([resourceId])
  @@index([actorId])
  @@map("resource_audit")
}

model Group {
  id          String        @id @default(cuid())
  name        String
  description String?
  createdById String
  createdAt   DateTime      @default(now())
  createdBy   User          @relation("UserCreatedGroups", fields: [createdById], references: [id])
  members     GroupMember[] @relation("GroupMembers")
}

model GroupMember {
  id       String   @id @default(cuid())
  groupId  String
  userId   String
  joinedAt DateTime @default(now())
  group    Group    @relation("GroupMembers", fields: [groupId], references: [id])
  user     User     @relation("UserGroupMemberships", fields: [userId], references: [id])
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String
  date        DateTime
  posterUrl   String?
  createdById String
  createdAt   DateTime @default(now())
  createdBy   User     @relation(fields: [createdById], references: [id])
}

enum Role {
  STUDENT
  ADMIN
  TEACHER
}

enum UniversityRole {
  ADMIN
  CONTRIBUTOR
  VIEWER
}

enum PostCategory {
  GENERAL
  QUESTION
  OPPORTUNITY
  EVENT
}

enum ResourceStatus {
  PENDING
  APPROVED
  REJECTED
  ARCHIVED
}

enum ResourceNodeType {
  FOLDER
  FILE
}

enum ResourceFolderKind {
  UNIVERSITY
  DEPARTMENT
  COURSE
  CUSTOM
}

enum ResourceMediaType {
  DOCUMENT
  IMAGE
  VIDEO
  OTHER
}

enum ResourceAuditAction {
  SUBMITTED
  APPROVED
  REJECTED
  ARCHIVED
  RESTORED
}

model Opportunity {
  id             String   @id @default(cuid())
  title          String
  description    String
  type           String
  provider       String
  providerLogo   String? // small image (e.g., org logo)
  bannerImage    String? // main banner/poster for the opportunity
  university     String?
  department     String?
  tags           String[]
  location       String?
  applicationUrl String?
  deadline       DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  postedById     String
  postedBy       User     @relation(fields: [postedById], references: [id], onDelete: Cascade)
  isVerified     Boolean  @default(false)
  views          Int      @default(0)
  bookmarks      Int      @default(0)

  @@map("opportunity")
}
