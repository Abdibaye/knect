generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Notification {
  id        String   @id @default(cuid())
  type      String
  message   String
  userId    String
  postId    String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id])
  post      Post?    @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("notification")
}

model User {
  id                  String         @id
  name                String
  email               String         @unique
  emailVerified       Boolean
  image               String?
  createdAt           DateTime
  updatedAt           DateTime
  about               String?
  location            String?
  username            String?
  department          String?
  researchFocusSkills String?
  university          String?
  yearOfStudy         String?
  role                Role           @default(STUDENT)
  Event               Event[]
  createdGroups       Group[]        @relation("UserCreatedGroups")
  groupMemberships    GroupMember[]  @relation("UserGroupMemberships")
  Resource            Resource[]
  Opportunity         Opportunity[]
  accounts            Account[]
  Comments            Comment[]
  Likes               Like[]
  notifications       Notification[]
  Post                Post[]
  sessions            Session[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Post {
  id            String         @id @default(cuid())
  title         String?
  content       String
  imageUrl      String?
  mediaType     String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  authorId      String
  tags          String[]
  attachments   Json?
  citation      String?
  department    String?
  doi           String?
  downloads     Int            @default(0)
  resourceType  String?
  role          String?
  summary       String?
  university    String?
  views         Int            @default(0)
  visibility    String?
  eventDetails  Json?
  comments      Comment[]
  likes         Like[]
  notifications Notification[]
  author        User           @relation(fields: [authorId], references: [id])

  @@map("post")
}

model Comment {
  id            String         @id @default(cuid())
  content       String
  createdAt     DateTime       @default(now())
  postId        String
  authorId      String
  author        User           @relation(fields: [authorId], references: [id])
  post          Post           @relation(fields: [postId], references: [id])
  notifications Notification[]

  @@map("comment")
}

model Like {
  id     String @id @default(cuid())
  postId String
  userId String
  post   Post   @relation(fields: [postId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@unique([postId, userId])
  @@map("like")
}

model Resource {
  id           String   @id @default(cuid())
  title        String
  uploadedById String
  createdAt    DateTime @default(now())
  author       String
  categories   String[]
  description  String
  downloadUrl  String
  downloads    Int      @default(0)
  externalUrl  String?
  rating       Float    @default(0)
  tags         String[]
  updatedAt    DateTime @updatedAt
  uploadedBy   User     @relation(fields: [uploadedById], references: [id])
}

model Group {
  id          String        @id @default(cuid())
  name        String
  description String?
  createdById String
  createdAt   DateTime      @default(now())
  createdBy   User          @relation("UserCreatedGroups", fields: [createdById], references: [id])
  members     GroupMember[] @relation("GroupMembers")
}

model GroupMember {
  id       String   @id @default(cuid())
  groupId  String
  userId   String
  joinedAt DateTime @default(now())
  group    Group    @relation("GroupMembers", fields: [groupId], references: [id])
  user     User     @relation("UserGroupMemberships", fields: [userId], references: [id])
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String
  date        DateTime
  posterUrl   String?
  createdById String
  createdAt   DateTime @default(now())
  createdBy   User     @relation(fields: [createdById], references: [id])
}

enum Role {
  STUDENT
  ADMIN
  TEACHER
}

enum PostCategory {
  GENERAL
  QUESTION
  OPPORTUNITY
  EVENT
}

model Opportunity {
  id             String   @id @default(cuid())
  title          String
  description    String
  type           String
  provider       String
  providerLogo   String? // small image (e.g., org logo)
  bannerImage    String? // main banner/poster for the opportunity
  university     String?
  department     String?
  tags           String[]
  location       String?
  applicationUrl String?
  deadline       DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  postedById     String
  postedBy       User     @relation(fields: [postedById], references: [id], onDelete: Cascade)
  isVerified     Boolean  @default(false)
  views          Int      @default(0)
  bookmarks      Int      @default(0)

  @@map("opportunity")
}
