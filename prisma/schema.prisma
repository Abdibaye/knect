// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  bio           String?   
  username      String?  
  location      String? 
  // academic profile fields
  university    String?
  department    String?
  yearOfStudy   String?
  skills        String[]  @default([])
  researchFocus String?
  publications  String[]  @default([])
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  Post          Post[]
  Resource      Resource[]
  // groups created by this user
  createdGroups Group[]   @relation("UserCreatedGroups")
  // group memberships for this user
  groupMemberships GroupMember[] @relation("UserGroupMemberships")
  Event         Event[]
  Comments      Comment[]
  Likes         Like[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum Role {
  STUDENT
  ADMIN
}

model Post {
  id          String   @id @default(cuid())
  title       String
  content     String
  summary     String?
  imageUrl    String?
  resourceType String?
  role        String?
  university  String?
  department  String?
  doi         String?
  citation    String?
  attachments Json?
  visibility  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  tags        String[]
  comments    Comment[]
  likes       Like[]
  views       Int      @default(0)
  downloads   Int      @default(0)

  @@map("post")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String

  @@map("comment")
}

model Like {
  id      String @id @default(cuid())
  post    Post   @relation(fields: [postId], references: [id])
  postId  String
  user    User   @relation(fields: [userId], references: [id])
  userId  String

  @@unique([postId, userId])
  @@map("like")
}

enum PostCategory {
  GENERAL
  QUESTION
  OPPORTUNITY
  EVENT
}

// Updated Resource model based on UI and requirements
model Resource {
  id           String   @id @default(cuid())
  title        String
  rating       Float    @default(0)
  downloads    Int      @default(0)
  categories   String[] // e.g., ["React", "Guide"]
  description  String
  tags         String[] // e.g., ["React", "Hooks", "JavaScript", "Frontend"]
  author       String
  downloadUrl  String
  externalUrl  String?
  uploadedBy   User     @relation(fields: [uploadedById], references: [id])
  uploadedById String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Group {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdBy   User     @relation("UserCreatedGroups", fields: [createdById], references: [id])
  createdById String

  members     GroupMember[] @relation("GroupMembers")
  createdAt   DateTime @default(now())
}

model GroupMember {
  id        String   @id @default(cuid())
  group     Group    @relation("GroupMembers", fields: [groupId], references: [id])
  groupId   String
  user      User     @relation("UserGroupMemberships", fields: [userId], references: [id])
  userId    String
  joinedAt  DateTime @default(now())
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String
  date        DateTime
  posterUrl   String?
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime @default(now())
}